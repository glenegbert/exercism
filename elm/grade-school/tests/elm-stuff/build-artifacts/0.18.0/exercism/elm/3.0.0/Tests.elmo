var _exercism$elm$Tests$tests = A2(
	_elm_community$elm_test$Test$describe,
	'GradeSchool',
	{
		ctor: '::',
		_0: A2(
			_elm_community$elm_test$Test$test,
			'add student',
			function (_p0) {
				var _p1 = _p0;
				return A2(
					_elm_community$elm_test$Expect$equal,
					{
						ctor: '::',
						_0: 'Aimee',
						_1: {ctor: '[]'}
					},
					A2(
						_exercism$elm$GradeSchool$studentsInGrade,
						2,
						A3(_exercism$elm$GradeSchool$addStudent, 2, 'Aimee', _exercism$elm$GradeSchool$empty)));
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_community$elm_test$Test$test,
				'add more students in same class',
				function (_p2) {
					var _p3 = _p2;
					return A2(
						_elm_community$elm_test$Expect$equal,
						{
							ctor: '::',
							_0: 'Blair',
							_1: {
								ctor: '::',
								_0: 'James',
								_1: {
									ctor: '::',
									_0: 'Paul',
									_1: {ctor: '[]'}
								}
							}
						},
						A2(
							_exercism$elm$GradeSchool$studentsInGrade,
							2,
							A3(
								_exercism$elm$GradeSchool$addStudent,
								2,
								'Paul',
								A3(
									_exercism$elm$GradeSchool$addStudent,
									2,
									'Blair',
									A3(_exercism$elm$GradeSchool$addStudent, 2, 'James', _exercism$elm$GradeSchool$empty)))));
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_community$elm_test$Test$test,
					'add students to different grades',
					function (_p4) {
						var _p5 = _p4;
						return A2(
							_elm_community$elm_test$Expect$equal,
							{
								ctor: '::',
								_0: {
									ctor: '::',
									_0: 'Chelsea',
									_1: {ctor: '[]'}
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '::',
										_0: 'Logan',
										_1: {ctor: '[]'}
									},
									_1: {ctor: '[]'}
								}
							},
							function () {
								var school = A3(
									_exercism$elm$GradeSchool$addStudent,
									7,
									'Logan',
									A3(_exercism$elm$GradeSchool$addStudent, 3, 'Chelsea', _exercism$elm$GradeSchool$empty));
								return {
									ctor: '::',
									_0: A2(_exercism$elm$GradeSchool$studentsInGrade, 3, school),
									_1: {
										ctor: '::',
										_0: A2(_exercism$elm$GradeSchool$studentsInGrade, 7, school),
										_1: {ctor: '[]'}
									}
								};
							}());
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_community$elm_test$Test$test,
						'get students in a grade',
						function (_p6) {
							var _p7 = _p6;
							return A2(
								_elm_community$elm_test$Expect$equal,
								{
									ctor: '::',
									_0: 'Bradley',
									_1: {
										ctor: '::',
										_0: 'Franklin',
										_1: {ctor: '[]'}
									}
								},
								A2(
									_exercism$elm$GradeSchool$studentsInGrade,
									5,
									A3(
										_exercism$elm$GradeSchool$addStudent,
										1,
										'Jeff',
										A3(
											_exercism$elm$GradeSchool$addStudent,
											5,
											'Bradley',
											A3(_exercism$elm$GradeSchool$addStudent, 5, 'Franklin', _exercism$elm$GradeSchool$empty)))));
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_community$elm_test$Test$test,
							'get all students in the school',
							function (_p8) {
								var _p9 = _p8;
								return A2(
									_elm_community$elm_test$Expect$equal,
									{
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 3,
											_1: {
												ctor: '::',
												_0: 'Kyle',
												_1: {ctor: '[]'}
											}
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 4,
												_1: {
													ctor: '::',
													_0: 'Christopher',
													_1: {
														ctor: '::',
														_0: 'Jennifer',
														_1: {ctor: '[]'}
													}
												}
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 6,
													_1: {
														ctor: '::',
														_0: 'Kareem',
														_1: {ctor: '[]'}
													}
												},
												_1: {ctor: '[]'}
											}
										}
									},
									_exercism$elm$GradeSchool$allStudents(
										A3(
											_exercism$elm$GradeSchool$addStudent,
											3,
											'Kyle',
											A3(
												_exercism$elm$GradeSchool$addStudent,
												4,
												'Christopher',
												A3(
													_exercism$elm$GradeSchool$addStudent,
													6,
													'Kareem',
													A3(_exercism$elm$GradeSchool$addStudent, 4, 'Jennifer', _exercism$elm$GradeSchool$empty))))));
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_community$elm_test$Test$test,
								'get students in a non-existent grade',
								function (_p10) {
									var _p11 = _p10;
									return A2(
										_elm_community$elm_test$Expect$equal,
										{ctor: '[]'},
										A2(_exercism$elm$GradeSchool$studentsInGrade, 1, _exercism$elm$GradeSchool$empty));
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
