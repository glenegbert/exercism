var _exercism$elm$Tests$tests = A2(
	_elm_community$elm_test$Test$describe,
	'triangleKind',
	{
		ctor: '::',
		_0: A2(
			_elm_community$elm_test$Test$test,
			'the solution is for the correct version of the test',
			function (_p0) {
				var _p1 = _p0;
				return A2(_elm_community$elm_test$Expect$equal, 2, _exercism$elm$Triangle$version);
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_community$elm_test$Test$test,
				'equilateral triangles have equal sides',
				function (_p2) {
					var _p3 = _p2;
					return A2(
						_elm_community$elm_test$Expect$equal,
						_elm_lang$core$Result$Ok(_exercism$elm$Triangle$Equilateral),
						A3(_exercism$elm$Triangle$triangleKind, 2, 2, 2));
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_community$elm_test$Test$test,
					'larger equilateral triangles also have equal sides',
					function (_p4) {
						var _p5 = _p4;
						return A2(
							_elm_community$elm_test$Expect$equal,
							_elm_lang$core$Result$Ok(_exercism$elm$Triangle$Equilateral),
							A3(_exercism$elm$Triangle$triangleKind, 10, 10, 10));
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_community$elm_test$Test$test,
						'isosceles triangles have last two sides equal',
						function (_p6) {
							var _p7 = _p6;
							return A2(
								_elm_community$elm_test$Expect$equal,
								_elm_lang$core$Result$Ok(_exercism$elm$Triangle$Isosceles),
								A3(_exercism$elm$Triangle$triangleKind, 3, 4, 4));
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_community$elm_test$Test$test,
							'isosceles triangles have first and last sides equal',
							function (_p8) {
								var _p9 = _p8;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_elm_lang$core$Result$Ok(_exercism$elm$Triangle$Isosceles),
									A3(_exercism$elm$Triangle$triangleKind, 4, 3, 4));
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_community$elm_test$Test$test,
								'isosceles triangles have two first sides equal',
								function (_p10) {
									var _p11 = _p10;
									return A2(
										_elm_community$elm_test$Expect$equal,
										_elm_lang$core$Result$Ok(_exercism$elm$Triangle$Isosceles),
										A3(_exercism$elm$Triangle$triangleKind, 4, 4, 3));
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_community$elm_test$Test$test,
									'isosceles triangles have in fact exactly two sides equal',
									function (_p12) {
										var _p13 = _p12;
										return A2(
											_elm_community$elm_test$Expect$equal,
											_elm_lang$core$Result$Ok(_exercism$elm$Triangle$Isosceles),
											A3(_exercism$elm$Triangle$triangleKind, 10, 10, 2));
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_community$elm_test$Test$test,
										'scalene triangles have no equal sides',
										function (_p14) {
											var _p15 = _p14;
											return A2(
												_elm_community$elm_test$Expect$equal,
												_elm_lang$core$Result$Ok(_exercism$elm$Triangle$Scalene),
												A3(_exercism$elm$Triangle$triangleKind, 3, 4, 5));
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_community$elm_test$Test$test,
											'scalene triangles have no equal sides at a larger scale too',
											function (_p16) {
												var _p17 = _p16;
												return A2(
													_elm_community$elm_test$Expect$equal,
													_elm_lang$core$Result$Ok(_exercism$elm$Triangle$Scalene),
													A3(_exercism$elm$Triangle$triangleKind, 10, 11, 12));
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_community$elm_test$Test$test,
												'scalene triangles have no equal sides at a larger scale too 2',
												function (_p18) {
													var _p19 = _p18;
													return A2(
														_elm_community$elm_test$Expect$equal,
														_elm_lang$core$Result$Ok(_exercism$elm$Triangle$Scalene),
														A3(_exercism$elm$Triangle$triangleKind, 5, 4, 2));
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_community$elm_test$Test$test,
													'very small triangles are legal',
													function (_p20) {
														var _p21 = _p20;
														return A2(
															_elm_community$elm_test$Expect$equal,
															_elm_lang$core$Result$Ok(_exercism$elm$Triangle$Scalene),
															A3(_exercism$elm$Triangle$triangleKind, 0.4, 0.6, 0.3));
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_community$elm_test$Test$test,
														'triangles with no size are illegal',
														function (_p22) {
															var _p23 = _p22;
															return A2(
																_elm_community$elm_test$Expect$equal,
																_elm_lang$core$Result$Err('Invalid lengths'),
																A3(_exercism$elm$Triangle$triangleKind, 0, 0, 0));
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_community$elm_test$Test$test,
															'triangles with negative sides are illegal',
															function (_p24) {
																var _p25 = _p24;
																return A2(
																	_elm_community$elm_test$Expect$equal,
																	_elm_lang$core$Result$Err('Invalid lengths'),
																	A3(_exercism$elm$Triangle$triangleKind, 3, 4, -5));
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_community$elm_test$Test$test,
																'triangles violating triangle inequality are illegal 1',
																function (_p26) {
																	var _p27 = _p26;
																	return A2(
																		_elm_community$elm_test$Expect$equal,
																		_elm_lang$core$Result$Err('Violates inequality'),
																		A3(_exercism$elm$Triangle$triangleKind, 1, 1, 3));
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_community$elm_test$Test$test,
																	'triangles violating triangle inequality are illegal 2',
																	function (_p28) {
																		var _p29 = _p28;
																		return A2(
																			_elm_community$elm_test$Expect$equal,
																			_elm_lang$core$Result$Err('Violates inequality'),
																			A3(_exercism$elm$Triangle$triangleKind, 7, 3, 2));
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
