var _exercism$elm$Tests$lessThanTen = function (num) {
	return _elm_lang$core$Native_Utils.cmp(num, 10) < 0;
};
var _exercism$elm$Tests$isFirstLetter = F2(
	function (letter, word) {
		return _elm_lang$core$Native_Utils.eq(
			A2(_elm_lang$core$String$left, 1, word),
			letter);
	});
var _exercism$elm$Tests$odd = function (number) {
	return _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], number, 2),
		1);
};
var _exercism$elm$Tests$even = function (number) {
	return _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], number, 2),
		0);
};
var _exercism$elm$Tests$tests = A2(
	_elm_community$elm_test$Test$describe,
	'Strain',
	{
		ctor: '::',
		_0: A2(
			_elm_community$elm_test$Test$test,
			'empty keep',
			function (_p0) {
				var _p1 = _p0;
				return A2(
					_elm_community$elm_test$Expect$equal,
					{ctor: '[]'},
					A2(
						_exercism$elm$Strain$keep,
						_exercism$elm$Tests$lessThanTen,
						{ctor: '[]'}));
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_community$elm_test$Test$test,
				'keep everything',
				function (_p2) {
					var _p3 = _p2;
					return A2(
						_elm_community$elm_test$Expect$equal,
						{
							ctor: '::',
							_0: 1,
							_1: {
								ctor: '::',
								_0: 2,
								_1: {
									ctor: '::',
									_0: 3,
									_1: {ctor: '[]'}
								}
							}
						},
						A2(
							_exercism$elm$Strain$keep,
							_exercism$elm$Tests$lessThanTen,
							{
								ctor: '::',
								_0: 1,
								_1: {
									ctor: '::',
									_0: 2,
									_1: {
										ctor: '::',
										_0: 3,
										_1: {ctor: '[]'}
									}
								}
							}));
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_community$elm_test$Test$test,
					'keep first and last',
					function (_p4) {
						var _p5 = _p4;
						return A2(
							_elm_community$elm_test$Expect$equal,
							{
								ctor: '::',
								_0: 1,
								_1: {
									ctor: '::',
									_0: 3,
									_1: {ctor: '[]'}
								}
							},
							A2(
								_exercism$elm$Strain$keep,
								_exercism$elm$Tests$odd,
								{
									ctor: '::',
									_0: 1,
									_1: {
										ctor: '::',
										_0: 2,
										_1: {
											ctor: '::',
											_0: 3,
											_1: {ctor: '[]'}
										}
									}
								}));
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_community$elm_test$Test$test,
						'keep nothing',
						function (_p6) {
							var _p7 = _p6;
							return A2(
								_elm_community$elm_test$Expect$equal,
								{ctor: '[]'},
								A2(
									_exercism$elm$Strain$keep,
									_exercism$elm$Tests$even,
									{
										ctor: '::',
										_0: 1,
										_1: {
											ctor: '::',
											_0: 3,
											_1: {
												ctor: '::',
												_0: 5,
												_1: {
													ctor: '::',
													_0: 7,
													_1: {ctor: '[]'}
												}
											}
										}
									}));
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_community$elm_test$Test$test,
							'keep neither first nor last',
							function (_p8) {
								var _p9 = _p8;
								return A2(
									_elm_community$elm_test$Expect$equal,
									{
										ctor: '::',
										_0: 2,
										_1: {ctor: '[]'}
									},
									A2(
										_exercism$elm$Strain$keep,
										_exercism$elm$Tests$even,
										{
											ctor: '::',
											_0: 1,
											_1: {
												ctor: '::',
												_0: 2,
												_1: {
													ctor: '::',
													_0: 3,
													_1: {ctor: '[]'}
												}
											}
										}));
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_community$elm_test$Test$test,
								'keep strings',
								function (_p10) {
									var _p11 = _p10;
									return A2(
										_elm_community$elm_test$Expect$equal,
										{
											ctor: '::',
											_0: 'zebra',
											_1: {
												ctor: '::',
												_0: 'zombies',
												_1: {
													ctor: '::',
													_0: 'zealot',
													_1: {ctor: '[]'}
												}
											}
										},
										A2(
											_exercism$elm$Strain$keep,
											_exercism$elm$Tests$isFirstLetter('z'),
											{
												ctor: '::',
												_0: 'apple',
												_1: {
													ctor: '::',
													_0: 'zebra',
													_1: {
														ctor: '::',
														_0: 'banana',
														_1: {
															ctor: '::',
															_0: 'zombies',
															_1: {
																ctor: '::',
																_0: 'cherimoya',
																_1: {
																	ctor: '::',
																	_0: 'zealot',
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}));
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_community$elm_test$Test$test,
									'empty discard',
									function (_p12) {
										var _p13 = _p12;
										return A2(
											_elm_community$elm_test$Expect$equal,
											{ctor: '[]'},
											A2(
												_exercism$elm$Strain$discard,
												_exercism$elm$Tests$lessThanTen,
												{ctor: '[]'}));
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_community$elm_test$Test$test,
										'discard everything',
										function (_p14) {
											var _p15 = _p14;
											return A2(
												_elm_community$elm_test$Expect$equal,
												{ctor: '[]'},
												A2(
													_exercism$elm$Strain$discard,
													_exercism$elm$Tests$lessThanTen,
													{
														ctor: '::',
														_0: 1,
														_1: {
															ctor: '::',
															_0: 2,
															_1: {
																ctor: '::',
																_0: 3,
																_1: {ctor: '[]'}
															}
														}
													}));
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_community$elm_test$Test$test,
											'discard first and last',
											function (_p16) {
												var _p17 = _p16;
												return A2(
													_elm_community$elm_test$Expect$equal,
													{
														ctor: '::',
														_0: 2,
														_1: {ctor: '[]'}
													},
													A2(
														_exercism$elm$Strain$discard,
														_exercism$elm$Tests$odd,
														{
															ctor: '::',
															_0: 1,
															_1: {
																ctor: '::',
																_0: 2,
																_1: {
																	ctor: '::',
																	_0: 3,
																	_1: {ctor: '[]'}
																}
															}
														}));
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_community$elm_test$Test$test,
												'discard nothing',
												function (_p18) {
													var _p19 = _p18;
													return A2(
														_elm_community$elm_test$Expect$equal,
														{
															ctor: '::',
															_0: 1,
															_1: {
																ctor: '::',
																_0: 3,
																_1: {
																	ctor: '::',
																	_0: 5,
																	_1: {
																		ctor: '::',
																		_0: 7,
																		_1: {ctor: '[]'}
																	}
																}
															}
														},
														A2(
															_exercism$elm$Strain$discard,
															_exercism$elm$Tests$even,
															{
																ctor: '::',
																_0: 1,
																_1: {
																	ctor: '::',
																	_0: 3,
																	_1: {
																		ctor: '::',
																		_0: 5,
																		_1: {
																			ctor: '::',
																			_0: 7,
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}));
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_community$elm_test$Test$test,
													'discard neither first nor last',
													function (_p20) {
														var _p21 = _p20;
														return A2(
															_elm_community$elm_test$Expect$equal,
															{
																ctor: '::',
																_0: 1,
																_1: {
																	ctor: '::',
																	_0: 3,
																	_1: {ctor: '[]'}
																}
															},
															A2(
																_exercism$elm$Strain$discard,
																_exercism$elm$Tests$even,
																{
																	ctor: '::',
																	_0: 1,
																	_1: {
																		ctor: '::',
																		_0: 2,
																		_1: {
																			ctor: '::',
																			_0: 3,
																			_1: {ctor: '[]'}
																		}
																	}
																}));
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_community$elm_test$Test$test,
														'discard strings',
														function (_p22) {
															var _p23 = _p22;
															return A2(
																_elm_community$elm_test$Expect$equal,
																{
																	ctor: '::',
																	_0: 'apple',
																	_1: {
																		ctor: '::',
																		_0: 'banana',
																		_1: {
																			ctor: '::',
																			_0: 'cherimoya',
																			_1: {ctor: '[]'}
																		}
																	}
																},
																A2(
																	_exercism$elm$Strain$discard,
																	_exercism$elm$Tests$isFirstLetter('z'),
																	{
																		ctor: '::',
																		_0: 'apple',
																		_1: {
																			ctor: '::',
																			_0: 'zebra',
																			_1: {
																				ctor: '::',
																				_0: 'banana',
																				_1: {
																					ctor: '::',
																					_0: 'zombies',
																					_1: {
																						ctor: '::',
																						_0: 'cherimoya',
																						_1: {
																							ctor: '::',
																							_0: 'zealot',
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	}));
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
